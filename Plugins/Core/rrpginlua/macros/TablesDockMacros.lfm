<?xml version="1.0" encoding="UTF-8"?>
<form name="frmMacrosTD" title="Macros" dataType="RRPG_Macros" formType="tablesDock">
	<import file="../interfaceUtils.xml"/>
	<script><![CDATA[
		local resumoMacrosNDB = NDB.newMemNodeDatabase();
		resumoMacrosNDB.macros = {};
		
		local remoteNDB = nil;
		local minhasMacrosGlobaisNDB = nil;
		local minhasMacrosDaMesaNDB = nil;
		
		local remoteObs = nil;
		local minhasGlobaisObs = nil;
		local minhasDaMesaObs = nil;
		
		local scheduledEnumMacros = false;
		local genMacrosPrepared = 0;
		
		local function doEnumMIn(macrosNodeNDB, mDest)
			local cns = NDB.getChildNodes(macrosNodeNDB);
			
			for i = 1, #cns, 1 do
				local c = cns[i];
				local nome = globalPrepareMacroNameForFind(globalPrepareMacroName(c.macro));
				
				if type(nome) == "string" and nome ~= "" and c.acoes ~= "" then
					local o = {};
					o.macro = "/" .. c.macro;
					o.acoes = c.acoes or "";
					o.tipoMacro = c.tipoMacro or "S";
					mDest[genMacrosPrepared] = o;
					genMacrosPrepared = genMacrosPrepared + 1;
				end;
			end;
		end;
		
		local function reenumerarTudo()
			scheduledEnumMacros = false;
			
			local m = {};
			
			if remoteNDB ~= nil and remoteNDB.macros ~= nil then
				doEnumMIn(remoteNDB.macros, m);			
			end;
			
			if minhasMacrosGlobaisNDB ~= nil and minhasMacrosGlobaisNDB.macros ~= nil then
				doEnumMIn(minhasMacrosGlobaisNDB.macros, m);		
			end;
			
			if minhasMacrosDaMesaNDB ~= nil and minhasMacrosDaMesaNDB.macros ~= nil then
				doEnumMIn(minhasMacrosDaMesaNDB.macros, m);		
			end;		

			resumoMacrosNDB.macros = m;
		end;
		
		local function enumerarMacrosRemotas()			
			reenumerarTudo();
		end;
		
		local function enumerarMinhasMacrosGlobais()			
			reenumerarTudo();
		end;
		
		local function enumerarMinhasMacrosDaMesa()			
			reenumerarTudo();
		end;
		
		local function enumerarMacros()
			reenumerarTudo();			
		end;
		
		function self.scheduleEnumRemote()
			setTimeout(enumerarMacrosRemotas, 600);
		end;
		
		function self.scheduleEnumMinhasGlobais()
			setTimeout(enumerarMinhasMacrosGlobais, 600);
		end;
		
		function self.scheduleEnumMinhasDaMesa()
			setTimeout(enumerarMinhasMacrosDaMesa, 600);
		end;		
		
		local function onChangeInNDB(ndb)
			if ndb == remoteNDB then
				if not scheduledEnumMacros then
					scheduledEnumMacros = true;
					self.scheduleEnumRemote();
				end;
			elseif ndb == minhasMacrosGlobaisNDB then
				if not scheduledEnumMacros then
					scheduledEnumMacros = true;
					self.scheduleEnumMinhasGlobais();
				end;
			elseif ndb == minhasMacrosDaMesaNDB then
				if not scheduledEnumMacros then
					scheduledEnumMacros = true;
					self.scheduleEnumMinhasDaMesa();
				end;
			end;
		end;
		
		local function createObserverFor(n)
			local observer = NDB.newObserver(n);				
								
			observer.onDeepChildAdded = function(x)
				onChangeInNDB(n);
			end;
			
			observer.onDeepChildRemoved = function(x)
				onChangeInNDB(n);							
			end;
			
			observer.onDeepChanged = function(node, attr, oldV)												
				onChangeInNDB(n);												
			end;		
			
			return observer;
		end;
	]]>
	</script>
	
	
	<event name="OnShow">
		self.mesa = Firecast.getMesaDe(self);
		
		if self.mesa ~= nil then
			local mesa = self.mesa;
			
			mesa:abrirNDBDeMesa("RRPG_Macros",
				function(n)
					if n ~= nil then
						-- Abriu!					
						remoteNDB = n;					
						remoteObs = createObserverFor(n);
						onChangeInNDB(n)		
					else
						remoteNDB = nil;
						remoteObs = nil;
					end;
				end, {criar=true});		

      globalNeedSimpleMacrosNDB();
				
			if globalSimpleMacrosNDB.global == nil then
				globalSimpleMacrosNDB.global = {};
			end;
			
			minhasMacrosGlobaisNDB = globalSimpleMacrosNDB.global;
			minhasGlobaisObs = createObserverFor(minhasMacrosGlobaisNDB);
								
			if globalSimpleMacrosNDB.mesas == nil then
				globalSimpleMacrosNDB.mesas = {};
			end;	

			if globalSimpleMacrosNDB.mesas[self.mesa.codigoInterno] == nil then
				globalSimpleMacrosNDB.mesas[self.mesa.codigoInterno] = {};
			end;

			minhasMacrosDaMesaNDB = globalSimpleMacrosNDB.mesas[self.mesa.codigoInterno];
			minhasDaMesaObs = createObserverFor(minhasMacrosDaMesaNDB); 
			
			enumerarMacros();
		end;		
	</event>

	<event name="OnHide">
		NDB.clearNode(resumoMacrosNDB);
	
		if self.mesa ~= nil then
			self.mesa = nil;
		end;
		
		if remoteObs ~= nil then
			remoteObs.enabled = false;
			remoteObs = nil;
		end;
		
		if minhasGlobaisObs ~= nil then
			minhasGlobaisObs.enabled = false;
			minhasGlobaisObs = nil;
		end;
		
		if minhasDaMesaObs ~= nil then
			minhasDaMesaObs.enabled = false;
			minhasDaMesaObs = nil;
		end;
		
		remoteNDB = nil;
		minhasMacrosGlobaisNDB = nil;
		minhasMacrosDaMesaNDB = nil;
	</event>
	
	<layout name="layTopo" align="top" height="25">
		<button name="btnGerMacros" align="left" text="@@macros.ui.manageMacros" textTrimming="none" width="112" margins="{left=3, right=3, top=1, bottom=1}" onClick="globalGerenciarMacros(self.mesa);"/>
	</layout>
		
	<dataScopeBox name="dsbMacros" align="client">
		<recordList name="rclMacros" field="macros" templateForm="frmMacroItemTablesDock" layout="horizontalTiles" align="client">
			<event name="onItemAdded">
				form.mesa = self.mesa;
			</event>
			
			<event name="onItemRemoved">
				form.mesa = nil;
			</event>
			
			<event name="onCompare">
				return Utils.compareStringPtBr(nodeA.macro, nodeB.macro);
			</event>
		</recordList>
	</dataScopeBox>
	
	<script>
		if System.isMobile() then
			self.layTopo.height = 32;
			self.layTopo.margins = {bottom=10, top=5, left=5, right=5};
			self.dsbMacros.margins = {left=5, right=5};
		end;
	</script>	
	
	<script>self.dsbMacros.node = resumoMacrosNDB;</script>
</form>