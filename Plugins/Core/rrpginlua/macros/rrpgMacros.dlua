local rrpg = require("rrpg.lua");
local Dialogs = require("dialogs.lua");
local NDB = require("ndb.lua");
local Locale = require("locale.lua");
local GUI = require("gui.lua");
local Log = require("log.lua");

local macros = {};
local _MACRO_CALL_CO_FUNCTION_RET = "CallSomeFunctionInMainThread";

local cloneFunctions = {};

local function throwMacroNotAssociatedToRooom(featureName)
	if type(featureName) == "string" then
		error(string.format(lang("macros.error.notRoomMissingFeature.withParam"), featureName));
	else
		error(lang("macros.error.notRoomMissingFeature"));
	end;
end;

local function cloneTable(t)
	if t == nil then
		return nil;
	end;

	if rawget(t, "handle") ~= nil then
		return cloneFunctions.cloneRRPGObject(t);
	else
		local r = {};
		
		for k, v in pairs(t) do	
			if type(v) == "table" then
				r[k] = cloneTable(v);
			else
				r[k] = v;
			end;
		end;
		
		return r;
	end
end;

cloneFunctions.cloneTable = cloneTable;

local __cloneObjectMetaTable = {
	__eq = function(op1, op2)
		local o1 = rawget(op1, "__o");
		local o2 = rawget(op2, "__o");
				
		return o1 == o2;
	end,

	__index = function(table, key)
		local rObj = rawget(table, "__o");
		
		if rObj ~= nil then
			local v = rObj[key];
			
			if type(v) == "table" then
				local nV = cloneTable(v);
				
				if rawget(v, "handle") ~= nil then
					rawset(table, key, nV);									
				end;
				
				return nV;
			else
				return v;
			end;
		else
			return nil;			
		end;
	end
};

local function cloneRRPGObject(o)
	if o == nil then
		return nil;
	end;

	local r = {};
	r.__o = o;
	
	for k, v in pairs(o) do	
		local typeOfV = type(v);
	
		if typeOfV == "function" then
			local vF = v;
			
			r[k] = function(par1, ...)		
				local retValues;
			
				if par1 == r then
					retValues = table.pack(vF(r.__o, ...));
				else
					retValues = table.pack(vF(par1, ...));
				end;
								
				for i = 1, #retValues, 1 do
					if type(retValues[i]) == "table" then
						retValues[i] = cloneTable(retValues[i]);
					end;
				end;
				
				return table.unpack(retValues);
			end;			
		elseif typeOfV == "table" then
			r[k] = cloneTable(v);
		else	
			r[k] = v;
		end;		
	end;
	
	setmetatable(r, __cloneObjectMetaTable);
	return r;
end;

cloneFunctions.cloneRRPGObject = cloneRRPGObject;

local yieldedFunctions = {};

local function handleCoResume(co, ...)
	local retornos = table.pack(coroutine.resume(co, ...));
	local isFirstCoResume = rawget(co, "__firstCoResume");
	rawset(co, "__firstCoResume", false);	
												
	if not retornos[1] then
		local chat = rawget(co, "__chat");	
		local fullErrorMsg = lang("macros.error.executionError") .. ":\n" .. retornos[2];
	
		if not isFirstCoResume and chat ~= nil then
			chat:escrever("[§K4]" .. fullErrorMsg)
		else	
			reraise(fullErrorMsg);
		end;
	else
		if retornos[2] == _MACRO_CALL_CO_FUNCTION_RET then			
			local f = yieldedFunctions[retornos[3]];
			
			f(co, table.unpack(retornos, 4));
		elseif coroutine.status(co)	== "dead" then
			local endCallback = rawget(co, "__endCallback");
			
			if endCallback ~= nil then
				endCallback(table.unpack(retornos, 2));
			end;
		end;
	end;
end;

function yieldedFunctions.yRolarDado(co, chat, rolagem, msgAdicional)	
	chat:rolarDados(rolagem, msgAdicional,
		function(rolado)
			handleCoResume(co, rolado.resultado, rolado);
		end);
end;

function yieldedFunctions.yChatSendMessageAndWait(co, chat, functionNameToCall, ...)	
	local functionToCall = chat[functionNameToCall] ;
	
	local parametersPacked = table.pack(...);
	
	parametersPacked[#parametersPacked + 1] = 
		function()
			handleCoResume(co);
		end;
		
	Locale.withNoEval(functionToCall, chat, table.unpack(parametersPacked));
end;

function yieldedFunctions.yEsperar(co, milisegundos)	
	setTimeout(function()
			handleCoResume(co);
		end, milisegundos);
end;

function yieldedFunctions.yShowMessage(co, msg)	
	Dialogs.showMessage(msg,
		function()
			handleCoResume(co);
		end);
end;

function yieldedFunctions.yAlert(co, msg)	
	Dialogs.alert(msg,
		function()
			handleCoResume(co);
		end);
end;

function yieldedFunctions.yConfirmOkCancel(co, question)	
	Dialogs.confirmOkCancel(question,
		function(confirmado)
			handleCoResume(co, confirmado);
		end);
end;

function yieldedFunctions.yConfirmYesNo(co, question)	
	Dialogs.confirmYesNo(question,
		function(confirmado)
			handleCoResume(co, confirmado);
		end);
end;

function yieldedFunctions.yInputQuery(co, prompt, initialValue, allowEmptyString)	
	Dialogs.inputQuery(prompt, prompt, initialValue,
		function(valor)
			handleCoResume(co, valor);
		end,
		
		function ()
			-- do nothing. coRoutine will be garbage collected
		end, allowEmptyString);
end;

function yieldedFunctions.yInvokeMacro(co, chat, macroName, parameter)	
	local foundMacro = nil;
	
	if globalFindMacro ~= nil then -- declarated in rrpgsimplemacros.lua
		foundMacro = globalFindMacro(macroName, rrpg.getMesaDe(chat));
	end;
	
	if foundMacro ~= nil then
		if globalExecutarMacro == nil then
			handleCoResume(co, false, "Macro runner engine not found");		
		else
			globalExecutarMacro(foundMacro, {chat=chat, 
											 parameter=parameter},
				function(...)
					handleCoResume(co, true, ...);
				end)		
		end;	
	else
		handleCoResume(co, false, "Macro not found: " .. (tostring(macroName) or ""));
	end;
end;

function yieldedFunctions.ySelectImageURL(co, defaultURL)
	Dialogs.selectImageURL(defaultURL,
		function(url)
			handleCoResume(co, url);
		end,
		
		function ()
			-- do nothing. coRoutine will be garbage collected
		end);
end;

function yieldedFunctions.yChoose(co, prompt, options, defaultOptionIndex, shortCircuit)
	Dialogs.choose(prompt, options,
		function(selected, index, text)
			if selected then
				handleCoResume(co, index, text);
			--else	
			-- do nothing. coRoutine will be garbage collected
			end;
		end, 
		
		defaultOptionIndex, shortCircuit);
end;

function yieldedFunctions.yChooseMultiple(co, prompt, options)
	Dialogs.chooseMultiple(prompt, options,
		function(selected, indexes, texts)
			if selected then
				handleCoResume(co, indexes, texts);
			--else	
			-- do nothing. coRoutine will be garbage collected
			end;
		end);
end;

function yieldedFunctions.yGetSheetOfCharacter(co, character)
	character:loadSheetNDB(
		function(node)
			if node ~= nil then
				handleCoResume(co, node);
			--else	
			-- do nothing. coRoutine will be garbage collected
			end;
		end);
end;

function yieldedFunctions.yGetUserNDB(co, name, options)
	local promise = Firecast.asyncOpenUserNDB(name, options);
	
	promise:thenDo(
		function (root)
			handleCoResume(co, true, root);	
		end,
		
		function (errorMsg)
			handleCoResume(co, false, errorMsg);	
		end);
end;

function yieldedFunctions.yGetUserRoomNDB(co, mesa, name, options)	
	local promise = mesa:asyncOpenUserRoomNDB(name, options);
	
	promise:thenDo(
		function (root)
			handleCoResume(co, true, root);	
		end,
		
		function (errorMsg)
			handleCoResume(co, false, errorMsg);	
		end);	
end;

function yieldedFunctions.yGetRoomNDB(co, mesa, name, options)
	local opcoes = {};
	
	if type(options) == "table" then
		opcoes.criar = options.create;
	end;
	
	mesa:abrirNDBDeMesa(name,
		function(node)
			if node ~= nil then
				handleCoResume(co, true, node);
			else	
				handleCoResume(co, false, "failed to getRoomNDB");
			end;
		end, 
		opcoes);
end;

local __delayedLoadMacroEnv = {
	jogadores = function(chat)
			local js = {};
			local mesa = rrpg.getMesaDe(chat);
			
			if mesa ~= nil then
				local mJs = mesa.jogadores;
				
				for i = 1, #mJs, 1 do
					js[#js + 1] = cloneTable(mJs[i]);
				end;
			else	
				throwMacroNotAssociatedToRooom("players");
			end;
					
			return js;
		end,
	
	inRoom = function(chat)
			local mesa = rrpg.getMesaDe(chat);	
			
			if mesa ~= nil then
				return true;
			else
				return false;
			end;
		end,
	
	meuJogador = function(chat)
			local mesa = rrpg.getMesaDe(chat);
			
			if mesa ~= nil then
				return cloneTable(mesa.meuJogador);
			else
				throwMacroNotAssociatedToRooom("myPlayer");
			end;
		end;
		
	mesa = function(chat)
		local m = rrpg.getMesaDe(chat); 
		
		if m ~= nil then
			return cloneTable(m);
		else
			throwMacroNotAssociatedToRooom("room");
		end;
	end;
	
	arg = function(chat, env)
		local str = env.parametro or "";
		local ret = {};
		
		for w in string.gmatch(str, "[^%s]+") do
			if w ~= "" then
				ret[#ret + 1] = w;
			end;
		end;
		
		return ret;
	end;
	
	parameter = function(chat, env)
		return env.parametro;
	end;
	
	myCharacter = function(chat, env)
		return env.getCharacterOfPlayer(env.myPlayer);
	end;
	
	sheet = function(chat, env)
		return env.getCharacterSheet(env.myCharacter);
	end;
	
	chat = function(chat, env)
		return cloneTable(chat);
	end;	
};

__delayedLoadMacroEnv.myPlayer = __delayedLoadMacroEnv.meuJogador;
__delayedLoadMacroEnv.room = __delayedLoadMacroEnv.mesa;
__delayedLoadMacroEnv.players = __delayedLoadMacroEnv.jogadores;

local function createMacroEnvTable(chat)
	local env = {};
	
	local function assertIsOnRoom(featureName)
		local mesa = rrpg.getMesaDe(chat);
		
		if mesa == nil then
			throwMacroNotAssociatedToRooom(featureName);
		end;
	end;
	
	function env.escrever(texto, quebrarLinha, permitirSmileys)
		chat:escrever(texto, quebrarLinha, permitirSmileys);
	end;
	
	env.write = env.escrever;
	
	function env.enviar(texto)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChatSendMessageAndWait', chat, 'enviarMensagem', texto); 
	end;		
	
	env.send = env.enviar;
	
	function env.rolar(rolagem, msgAdicional)
		local resultado, rolagemObj = coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yRolarDado', chat, rolagem, msgAdicional);
		return resultado, rolagemObj;
	end;
	
	env.roll = env.rolar;
	
	function env.rolarLocal(rolagem)
		local rolagemObj = rrpg.interpretarRolagem(rolagem);
		rolagemObj:rolarLocalmente();
		return rolagemObj.resultado, rolagemObj;
	end;

	env.rollLocal = env.rolarLocal;
	
	function env.esperar(milisegundos)
		if type(milisegundos) == "number" then
			if milisegundos < 1 then
				milisegundos = 1;
			end;
			
			coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yEsperar', milisegundos);
		end;
	end;
	
	env.wait = env.esperar;
	
	function env.agir(acao)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChatSendMessageAndWait', chat, 'enviarAcao', acao); 	
	end;
	
	env.act = env.agir;
		
	function env.narrar(narracao)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChatSendMessageAndWait', chat, 'enviarNarracao', narracao);	
	end;
	
	env.narrate = env.narrar;
	
	function env.enviarNPC(npc, msg)		
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChatSendMessageAndWait', chat, 'enviarMensagemNPC', npc, msg);			
	end;
	
	env.sendNPC = env.enviarNPC;
	
	env.showMessage = function(msg)
		coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yShowMessage', msg);
	end;
	
	env.alert = function(msg)
		coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yAlert', msg);	
	end;
	
	env.toast = function(msg)
		Locale.withNoEval(GUI.toast, msg);		
	end;
	
	env.confirmOkCancel = function(question)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yConfirmYesNo', question);	
	end;
	
	env.confirmYesNo = function(question)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yConfirmYesNo', question);	
	end;
	
	env.inputQuery = function (prompt, initialValue, allowEmptyString)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yInputQuery', prompt, initialValue, allowEmptyString);	
	end;
	
	env.selectImageURL = function(defaultURL)
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'ySelectImageURL', defaultURL);	
	end;
	
	env.invoke = function(macroName, parameter)
		local ret = table.pack(coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yInvokeMacro', chat, macroName, parameter));	
		
		if ret[1] == true then
			return table.unpack(ret, 2);
		else
			error(ret[2]);
		end;
	end;
	
	env.choose = function (prompt, options, defaultOptionIndex, shortCircuit)
		if type(options) ~= "table" or #options < 1 then
			error(lang("macros.error.invalidOptionForChoose"));
		end;
	
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChoose', prompt, options, defaultOptionIndex, shortCircuit);	
	end;
	
	env.chooseMultiple = function (prompt, options)
		if type(options) ~= "table" or #options < 1 then
			error(lang("macros.error.invalidOptionForChoose"));
		end;	
	
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yChooseMultiple', prompt, options);	
	end;	
	
	local function _getPlayersSorted()
		local mesa = env.mesa;
			
		if mesa == nil then
			return {};
		end;
		
		local players = mesa.jogadores;
		
		if players == nil then
			return {};
		end;
		
		table.sort(players,
			function(left, right)
				if left.isJuggernaut and not right.isJuggernaut then
					return true;
				elseif not left.isJuggernaut and right.isJuggernaut then
					return false;
				end;
				
				if left.isMestre and not right.isMestre then
					return true;
				elseif not left.isMestre and right.isMestre then
					return false;
				end;		

				if left.isJogador and not right.isJogador then
					return true;
				elseif not left.isJogador and right.isJogador then
					return false;
				end;
				
				local leftNick = removerAcentos(Utils.removerFmtChat(left.nick));
				local rightNick = removerAcentos(Utils.removerFmtChat(right.nick));
				
				if Utils.compareStringPtBr(leftNick, rightNick) < 0 then
					return true;
				else
					return false;
				end;
			end);
				
		return players;
	end;
	
	local function _getAllCharactersSorted(filterFunction)
		local mesa = env.mesa;
		
		if mesa == nil then
			return {};
		end;
		
		local chars = {};	
		
		local function recursiveEnumChars(bibItem)
			if bibItem == nil then
				return;
			end;
			
			local tipo = bibItem.tipo;
			
			if tipo == "personagem" then						
				local filtrado;
			
				if filterFunction ~= nil then
					filtrado = filterFunction(bibItem);
				else	
					filtrado = true;
				end;
				
				if filtrado then	
					chars[#chars + 1] = bibItem;
				end;
			elseif tipo == "diretorio" or tipo == "biblioteca" then
				local filhos = bibItem.filhos;
					
				for i = 1, #filhos, 1 do
					recursiveEnumChars(filhos[i]);
				end
			end;
		end;
		
		local bibRoot = mesa.biblioteca;
		recursiveEnumChars(bibRoot);	
		
		table.sort(chars,
			function(left, right)
				if Utils.compareStringPtBr(left.nome, right.nome) < 0 then
					return true;
				else
					return false;
				end;				
			end);			
		
		return chars;
	end;
	
	local function _createCharactersFilterFunction(filter)
		local myPlayer = env.myPlayer;
		local myLogin = nil;
		
		if myPlayer ~= nil then
			myLogin = myPlayer.login;
		end;
		
		return function(c)
			-- filter function
			local loginDono = c.loginDono;		
			local isPC = type(loginDono) == "string" and loginDono ~= "";			
			
			if filter == "pc" then
				return isPC;
			elseif filter == "pcOnline" then	
				return isPC and c.dono ~= nil;
			elseif filter == "npc" then
				return not isPC;
			elseif filter == "all" then	
				return true;
			elseif filter == "mine" then
				return isPC and (Utils.compareStringPtBr(loginDono, myLogin) == 0)
			elseif filter == nil then
				return true;
			else
				error(lang("macros.error.invalidCharacterFilter") .. ": " .. tostring(filter));
			end
		end
	end;
	
	env.choosePlayer = function(prompt, shortCircuit)	
		assertIsOnRoom("choosePlayer");
	
		local players = _getPlayersSorted();
		local playersText = {};
		
		for i = 1, #players, 1 do
			playersText[i] = Utils.removerFmtChat(players[i].nick) .. ' (' .. players[i].login .. ')';
		end;
		
		local index = env.choose(prompt, playersText, nil, shortCircuit);
		return players[index];
	end;
	
	env.choosePlayers = function(prompt)
		assertIsOnRoom("choosePlayers");
	
		local players = _getPlayersSorted();
		local playersText = {};
		
		for i = 1, #players, 1 do
			playersText[i] = Utils.removerFmtChat(players[i].nick) .. ' (' .. players[i].login .. ')';
		end;
		
		local indexes = env.chooseMultiple(prompt, playersText);
		local playersReturn = {};
		
		for i = 1, #indexes, 1 do
			playersReturn[i] = players[indexes[i]]
		end;
		
		return playersReturn;
	end;

	env.chooseCharacter	= function(prompt, filter, shortCircuit)
		assertIsOnRoom("chooseCharacter");
	
		local chars = _getAllCharactersSorted(_createCharactersFilterFunction(filter));
		local charsStr = {};			
		
		if #chars < 1 then
			if filter == "any" then
				error(lang("macros.error.noCharsForFilter.all"));
			elseif filter == "pc" then
				error(lang("macros.error.noCharsForFilter.pc"));
			elseif filter == "pcOnline" then
				error(lang("macros.error.noCharsForFilter.pcOnline"));
			elseif filter == "npc" then
				error(lang("macros.error.noCharsForFilter.npc"));
			elseif filter == "mine" then
				error(lang("macros.error.noCharsForFilter.mine"));			
			else
				error(lang("macros.error.noCharsForFilter") .. ": " .. (filter or "any"));
			end;
		end;
				
		for i = 1, #chars, 1 do
			charsStr[i] = chars[i].nome;
		end;
		
		local idx = env.choose(prompt, charsStr, nil, shortCircuit);
		return chars[idx];
	end;
	
	env.chooseCharacterOfPlayer	= function(prompt, player, shortCircuit)		
		assertIsOnRoom("chooseCharacterOfPlayer");
		
		local loginToSeek = nil;
		
		if type(player) == "number" then
			player = env.mesa:findJogador(player);
			
			if player == nil then
				error(lang("macros.error.playerNotFound") .. ": " .. tostring(player));
			end;
			
			loginToSeek = player.login;
		elseif type(player) == "string" then
			loginToSeek = player;
		elseif type(player) == "table" then
			if player.objectType ~= "jogador" then
				error(lang("macros.error.invalidParameterFunc") .. " chooseCharacterOfPlayer");
			end;
			
			loginToSeek = player.login;
		else
			error(lang("macros.error.invalidParameterFunc") .. " chooseCharacterOfPlayer");
		end;
	
		local chars = _getAllCharactersSorted(
			function(per)
				if Utils.compareStringPtBr(per.loginDono, loginToSeek) == 0 then
					return true;					
				else	
					return false;
				end;
			end);
			
		local charsStr = {};			
		
		if #chars < 1 then
			error(lang("macros.error.noCharsForFilter.specificPlayer"));
		end;
		
		for i = 1, #chars, 1 do
			charsStr[i] = chars[i].nome;
		end;
		
		local idx = env.choose(prompt, charsStr, nil, shortCircuit);
		return chars[idx];
	end;	
	
	env.chooseCharacters = function(prompt, filter)
		assertIsOnRoom("chooseCharacters");
	
		local chars = _getAllCharactersSorted(_createCharactersFilterFunction(filter));
		local charsStr = {};			
		
		if #chars < 1 then
			if filter == "any" then
				error(lang("macros.error.noCharsForFilter.all"));
			elseif filter == "pc" then
				error(lang("macros.error.noCharsForFilter.pc"));
			elseif filter == "pcOnline" then
				error(lang("macros.error.noCharsForFilter.pcOnline"));
			elseif filter == "npc" then
				error(lang("macros.error.noCharsForFilter.npc"));
			elseif filter == "mine" then
				error(lang("macros.error.noCharsForFilter.mine"));					
			else
				error(lang("macros.error.noCharsForFilter") .. ": " .. (filter or "any"));
			end;
		end;		
		
		for i = 1, #chars, 1 do
			charsStr[i] = chars[i].nome;
		end;
		
		local indexes = env.chooseMultiple(prompt, charsStr);
		local retTable = {};
		
		for i = 1, #indexes, 1 do
			retTable[i] = chars[indexes[i]];
		end;
		
		return retTable;
	end;		
	
	env.getCharacterOfPlayer = function(player)
		assertIsOnRoom("getCharacterOfPlayer");
		
		local loginToSeek = nil;
		local playerObject = nil;
		
		if type(player) == "number" then
			player = env.mesa:findJogador(player);
			
			if player == nil then
				error(lang("macros.error.playerNotFound") .. ": " .. tostring(player));
			end;
			
			loginToSeek = player.login;
			playerObject = player;
		elseif type(player) == "string" then
			loginToSeek = player;
			playerObject = env.mesa:findJogador(player);
		elseif type(player) == "table" then
			if player.objectType ~= "jogador" then
				error(lang("macros.error.invalidParameterFunc") .. " getCharacterOfPlayer");
			end;
			
			loginToSeek = player.login;
			playerObject = player;
		else
			error(lang("macros.error.invalidParameterFunc") .. " getCharacterOfPlayer");
		end;
	
		local mainPersonagem = nil;
		
		if playerObject ~= nil and playerObject.personagemPrincipal > 0 then
			mainPersonagem = env.mesa:findBibliotecaItem(playerObject.personagemPrincipal);
			
			if mainPersonagem ~= nil then
				return mainPersonagem;
			end;
		end;
		
		-- fallback plan 0
		
		local personagemHigherCode = nil;
		
		local chars = _getAllCharactersSorted(
			function(per)
				if Utils.compareStringPtBr(per.loginDono, loginToSeek) == 0 then
					if playerObject ~= nil and playerObject.personagemPrincipal == per.codigoInterno then
						mainPersonagem = per;
					end;					
					
					if personagemHigherCode == nil or per.codigoInterno > personagemHigherCode.codigoInterno then
						personagemHigherCode = per;
					end;
				
					return true;					
				else	
					return false;
				end;
			end);
			
		if mainPersonagem ~= nil then
			return mainPersonagem;
		end;		
		
		if personagemHigherCode ~= nil then -- fallback plan 1
			return personagemHigherCode;
		end;
							
		if #chars < 1 then -- fallback plan 2
			error(lang("macros.error.noCharsForFilter.specificPlayer"));
		end;
		
		return chars[1];	
	end;
	
	env.getCharacterSheet = function(character)	
		assertIsOnRoom("getCharacterSheet");
		return coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yGetSheetOfCharacter', character);			
	end;
	
	env.getUserNDB = function(name, options)
		local r, nodeOrError = coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yGetUserNDB', name, options);	
		
		if r then
			return nodeOrError;
		else	
			error(nodeOrError);
		end;
	end;
	
	env.getUserRoomNDB = function(name, options)
		assertIsOnRoom("getUserRoomNDB");
		local r, nodeOrError = coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yGetUserRoomNDB', env.mesa, name, options);	
		
		if r then
			return nodeOrError;
		else	
			error(nodeOrError);
		end;
	end;	
	
	env.getRoomNDB = function(name, options)
		assertIsOnRoom("getRoomNDB");
		local r, nodeOrError = coroutine.yield(_MACRO_CALL_CO_FUNCTION_RET, 'yGetRoomNDB', env.mesa, name, options);	
		
		if r then
			return nodeOrError;
		else	
			error(nodeOrError);
		end;
	end;	
	
	env.pairs = pairs;
	env.ipairs = ipairs;
	env.pcall = pcall;
	env.select = select;
	env.tonumber = tonumber;
	env.tostring = tostring;
	env.type = type;
	env.unpack = table.unpack;
	env.xpcall = xpcall;
	env.assert = assert;
	env.error = error;
	env.table = cloneTable(table);
	env.math = cloneTable(math);
	env.string = cloneTable(string);	
	env.coroutine = cloneTable(coroutine);
	env.utils = cloneTable(Utils);	
	env.ndb = cloneTable(NDB);
	env.Log = cloneTable(Log)
	
	env.Utils = env.utils;	
	env.NDB = env.ndb;
	
	local originalLoad = load;
	
	env.load = function(chunk, chunkname, mode)
			      return originalLoad(chunk, chunkname, mode, env);
	           end;
			   	
	-- metatable para carregar informações de forma atrasada, só quando precisar.
	local envMetaTable = {
		__index = function(table, key)
			local delayedLoadFunction = __delayedLoadMacroEnv[key];
			
			if delayedLoadFunction ~= nil then
				local v = delayedLoadFunction(chat, env);
				rawset(table, key, v);
				return v;
			else
				return nil;
			end;
		end};
	
	setmetatable(env, envMetaTable);
	return env;
end;

function macros.compileMacro(body, chat, macroName, endCallback)
	local function macroBootstrap(parameters)
		local ambiente = createMacroEnvTable(chat);
		
		if type(parameters) == "table" then
			for k, v in pairs(parameters) do
				if ambiente[k] == nil and (v ~= nil) then
					ambiente[k] = v;
				end;
			end;
		end;
			
		local f, errorMsg = load(body, "/" .. string.lower(macroName), "t", ambiente);
		
		if f == nil then
			error(lang("macros.error.compilingError") .. ":\n\n" .. errorMsg);
			return nil;
		end;
			
		local function macroLauncher(...)
			return Locale.withNoEval(
				function(...)
					local packedReturn = table.pack(pcall(f, ...));
					
					if not packedReturn[1] then
						reraise(packedReturn[2])
					else			
						return table.unpack(packedReturn, 2);
					end;
				end, ...);
		end;
			
		local co = coroutine.create(macroLauncher);		
		rawset(co, "__endCallback", endCallback);	
		rawset(co, "__chat", chat);	
		rawset(co, "__firstCoResume", true);		
		handleCoResume(co);
	end;
	
	return macroBootstrap;
end;

return macros;
